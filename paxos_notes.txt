The Coordinator Selection Process
Sequence Number Management
Every replica in the system maintains a local record of the highest sequence number it has encountered so far. 
This becomes crucial for the ordering mechanism:

Each replica tracks max_seen_seq (the highest sequence number observed)
This creates a distributed notion of "time" or "rounds" across the system

Becoming a Coordinator
When a replica wants to take on the coordinator role:
It generates a unique sequence number that is higher than any it has previously seen:
new_seq = max_seen_seq + 1
(The uniqueness is typically ensured by incorporating the replica's ID, such as new_seq = (round_number, replica_id))

It broadcasts a "propose" message (also called "prepare" in standard Paxos terminology) to all replicas:
PROPOSE(new_seq)

Each receiving replica must decide whether to acknowledge this coordinator:

If new_seq > max_seen_seq at the receiver:
The receiver updates max_seen_seq = new_seq
The receiver sends back a "promise" message
This promise means: "I will ignore all future messages from coordinators with sequence numbers less than new_seq"

If new_seq â‰¤ max_seen_seq:
The receiver rejects the propose message
This prevents outdated coordinators from interfering

The original replica becomes coordinator only if it receives promises from a majority of replicas

 The promise messages from replicas include the most recent value they have heard, if any, along with the sequence number of the coordinator from whom
 they heard it. The new coordinator chooses the value from the most recent coordinator. If none of the promise messages contain a value,
 the coordinator is free to choose a submitted value. The reasoning why this works is subtle, but proceeds roughly as follows. The new coordinator requires
 a response to the propose message from a majority of replicas. Therefore, if consensus was achieved by a previous coordinator, 
 the new coordinator is guaranteed to hear about the value decided upon from at least one replica. By induction, that value will
 have the highest sequence number of all responses received, and so will be selected by the new coordinator.

Paxos is a fundamental algorithm used to achieve consensus on a sequence of values, often for implementing a replicated log. 
This is done by executing the Paxos algorithm repeatedly, with each execution being an "instance" that agrees on a single value in the sequence. 
"Submitting a value" means running a Paxos instance for that value.

In Multi-Paxos, a system based on Paxos, some replicas might lag behind by missing recent Paxos instances. 
A dedicated "catch-up mechanism" is used to enable these lagging replicas to synchronize with the leading ones.
Each replica maintains a locally persistent log that records all Paxos actions. This log serves two main purposes: 
it allows a replica to reconstruct its state by replaying the log after a crash and recovery, and it is also used to help lagging replicas catch up on missed actions.

Rebuilding Replicas in Paxos: The Non-Voting Member Approach
This passage describes a careful approach for safely reintegrating a replica with corrupted disk state back into a Paxos cluster. Let me explain this as a Paxos expert:
The Problem Being Solved
When a replica loses its disk state in Paxos, it creates a potentially dangerous situation:

The replica might have previously sent PROMISE messages to coordinators
These promises include commitments not to accept proposals with lower sequence numbers
If the replica simply rejoins with empty state, it might violate these promises, causing inconsistency

The Solution: Non-Voting Membership During Recovery
The passage describes a conservative recovery protocol:
What "Non-Voting Member" Means
The recovering replica:

Receives and processes all Paxos messages
Uses the catch-up mechanism to rebuild its state
Critically: Does not respond with PROMISE or ACKNOWLEDGE messages

By not voting (not sending promises or acknowledgments), the replica doesn't participate in forming majorities needed for consensus decisions.
The Waiting Period
The replica remains in this non-voting state until it observes:

At least one complete instance of Paxos
That was started after the replica began its recovery process

Why Wait for "One Complete Instance"?
This waiting period ensures safety because:

Any promises the replica made before crashing have a sequence number lower than current operations
By observing a full Paxos instance complete successfully without its participation, the replica confirms:

The system has a functioning majority without it
Current sequence numbers are higher than any it might have promised before crashing

The phrase "reneging on an earlier promise" refers to accidentally breaking a promise made before the crash:

Before crash: "I promise not to accept proposals with sequence number < X"
After naive recovery: Might accept a proposal with sequence number < X because it lost that promise
This solution prevents such violations

In More Technical Detail
Let's say the replica crashed at time T1 and started recovery at time T2:

Any Paxos instances the replica participated in before T1 had sequence numbers < S
New Paxos instances starting after T2 will have sequence numbers > S
By waiting to observe a complete instance with sequence number > S, the replica ensures any promises it made before T1 are now irrelevant (superseded by higher sequence numbers)

This approach is conservative but ensures the recovering replica cannot violate safety properties of Paxos, preserving the system's consistency guarantees during and after recovery.
The beauty of this approach is that it allows safe recovery without requiring special recovery protocols or additional messages - the replica simply leverages the existing Paxos protocol while temporarily abstaining from voting.

